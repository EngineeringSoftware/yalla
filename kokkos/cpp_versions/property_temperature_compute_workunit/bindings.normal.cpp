// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#include <Kokkos_Core.hpp>
#include <functor.hpp>
#include <pybind11/pybind11.h>

double run_compute_workunit(
    Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                 Kokkos::Experimental::DefaultViewHooks>
        v,
    Kokkos::View<double *, Kokkos::LayoutRight, pk_arg_memspace,
                 Kokkos::Experimental::DefaultViewHooks>
        mass,
    Kokkos::View<int32_t *, Kokkos::LayoutRight, pk_arg_memspace,
                 Kokkos::Experimental::DefaultViewHooks>
        type,
    pk_exec_space pk_exec_space_instance, const std::string &pk_kernel_name,
    int pk_threads_begin, int pk_threads_end, int pk_randpool_seed,
    int pk_randpool_num_states) {
  double pk_acc = 0;
  auto pk_d_v = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, v);
  auto pk_d_mass =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, mass);
  auto pk_d_type =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, type);
  pk_functor_compute_workunit pk_f(
      pk_d_v, pk_d_mass, pk_d_type);
  Kokkos::parallel_reduce(
      pk_kernel_name,
      Kokkos::RangePolicy<
          pk_exec_space,
          pk_functor_compute_workunit::compute_workunit_tag>(
          pk_exec_space_instance, pk_threads_begin, pk_threads_end),
      pk_f, pk_acc);
  Kokkos::resize(v, pk_d_v.extent(0), pk_d_v.extent(1));
  Kokkos::deep_copy(v, pk_d_v);
  Kokkos::resize(mass, pk_d_mass.extent(0));
  Kokkos::deep_copy(mass, pk_d_mass);
  Kokkos::resize(type, pk_d_type.extent(0));
  Kokkos::deep_copy(type, pk_d_type);
  return pk_acc;
}
double wrapper_compute_workunit(pybind11::kwargs kwargs) {
  return run_compute_workunit(
      kwargs["v"]
          .cast<Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["mass"]
          .cast<Kokkos::View<double *, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["type"]
          .cast<Kokkos::View<int32_t *, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["pk_exec_space_instance"].cast<pk_exec_space>(),
      kwargs["pk_kernel_name"].cast<std::string>(),
      kwargs["pk_threads_begin"].cast<int>(),
      kwargs["pk_threads_end"].cast<int>(),
      kwargs["pk_randpool_seed"].cast<int>(),
      kwargs["pk_randpool_num_states"].cast<int>());
  ;
}
PYBIND11_MODULE(
    PLACEHOLDER, k) {
  k.def("wrapper_compute_workunit", &wrapper_compute_workunit);
}