// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#include <Kokkos_Core.hpp>
#include <Kokkos_Sort.hpp>
#include <functor.hpp>
#include <pybind11/pybind11.h>

void run(int32_t nbinx, int32_t nbiny, int32_t nbinz, int32_t nhalo,
         double minx, double maxx, double miny, double maxy, double minz,
         double maxz, int32_t range_min, int32_t range_max, bool sort,
         Kokkos::View<int32_t ***, pk_exec_space::array_layout, pk_arg_memspace,
                      Kokkos::Experimental::DefaultViewHooks>
             bincount,
         Kokkos::View<int32_t ***, pk_exec_space::array_layout, pk_arg_memspace,
                      Kokkos::Experimental::DefaultViewHooks>
             binoffsets,
         Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                      Kokkos::Experimental::DefaultViewHooks>
             x,
         Kokkos::View<double **, pk_exec_space::array_layout, pk_arg_memspace,
                      Kokkos::Experimental::DefaultViewHooks>
             v,
         Kokkos::View<double **, pk_exec_space::array_layout, pk_arg_memspace,
                      Kokkos::Experimental::DefaultViewHooks>
             f,
         Kokkos::View<int32_t *, pk_exec_space::array_layout, pk_arg_memspace,
                      Kokkos::Experimental::DefaultViewHooks>
             type,
         Kokkos::View<int32_t *, pk_exec_space::array_layout, pk_arg_memspace,
                      Kokkos::Experimental::DefaultViewHooks>
             id,
         Kokkos::View<double *, pk_exec_space::array_layout, pk_arg_memspace,
                      Kokkos::Experimental::DefaultViewHooks>
             q,
         Kokkos::View<int32_t *, pk_exec_space::array_layout, pk_arg_memspace,
                      Kokkos::Experimental::DefaultViewHooks>
             permute_vector,
         Kokkos::View<int32_t *, pk_exec_space::array_layout, pk_arg_memspace,
                      Kokkos::Experimental::DefaultViewHooks>
             bin_count_1d,
         Kokkos::View<int32_t *, pk_exec_space::array_layout, pk_arg_memspace,
                      Kokkos::Experimental::DefaultViewHooks>
             bin_offsets_1d,
         pk_exec_space pk_exec_space_instance, int pk_randpool_seed,
         int pk_randpool_num_states) {
  auto pk_d_bincount =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, bincount);
  auto pk_d_binoffsets =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, binoffsets);
  auto pk_d_x = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, x);
  auto pk_d_v = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, v);
  auto pk_d_f = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, f);
  auto pk_d_type =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, type);
  auto pk_d_id =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, id);
  auto pk_d_q = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, q);
  auto pk_d_permute_vector = Kokkos::create_mirror_view_and_copy(
      pk_exec_space_instance, permute_vector);
  auto pk_d_bin_count_1d =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, bin_count_1d);
  auto pk_d_bin_offsets_1d = Kokkos::create_mirror_view_and_copy(
      pk_exec_space_instance, bin_offsets_1d);
  pk_functor_BinningKKSort pk_f(
      nbinx, nbiny, nbinz, nhalo, minx, maxx, miny, maxy, minz, maxz, range_min,
      range_max, sort, pk_d_bincount, pk_d_binoffsets, pk_d_x, pk_d_v, pk_d_f,
      pk_d_type, pk_d_id, pk_d_q, pk_d_permute_vector, pk_d_bin_count_1d,
      pk_d_bin_offsets_1d);
  double pk_acc = 0;
  int32_t nbin[3] = {nbinx, nbiny, nbinz};
  double min_values[3] = {minx, miny, miny};
  double max_values[3] = {maxx, maxy, maxz};
  auto x_sub = Kokkos::subview(pk_d_x, std::make_pair(range_min, range_max),
                               Kokkos::ALL);
  auto binop = Kokkos::BinOp3D<
      Kokkos::View<double **, Kokkos::LayoutRight, pk_exec_space::memory_space,
                   Kokkos::Experimental::DefaultViewHooks>>(nbin, min_values,
                                                            max_values);
  auto sorter =
      Kokkos::BinSort<decltype(x_sub), decltype(binop), pk_exec_space, int>(
          x_sub, binop);
  sorter.create_permute_vector();
  auto _pk_pk_d_permute_vector = sorter.get_permute_vector();
  Kokkos::resize(pk_d_permute_vector, _pk_pk_d_permute_vector.extent(0));
  Kokkos::deep_copy(pk_d_permute_vector, _pk_pk_d_permute_vector);
  pk_f.permute_vector = pk_d_permute_vector;
  auto _pk_pk_d_bin_count_1d = sorter.get_bin_count();
  Kokkos::resize(pk_d_bin_count_1d, _pk_pk_d_bin_count_1d.extent(0));
  Kokkos::deep_copy(pk_d_bin_count_1d, _pk_pk_d_bin_count_1d);
  pk_f.bin_count_1d = pk_d_bin_count_1d;
  auto _pk_pk_d_bin_offsets_1d = sorter.get_bin_offsets();
  Kokkos::resize(pk_d_bin_offsets_1d, _pk_pk_d_bin_offsets_1d.extent(0));
  Kokkos::deep_copy(pk_d_bin_offsets_1d, _pk_pk_d_bin_offsets_1d);
  pk_f.bin_offsets_1d = pk_d_bin_offsets_1d;
  Kokkos::parallel_for(
      "Binning::AssignOffsets",
      Kokkos::RangePolicy<
          pk_exec_space,
          pk_functor_BinningKKSort::assign_offsets_tag>(
          0, ((((nbinx) * (nbiny))) * (nbinz))),
      pk_f);
  if (sort) {
    sorter.sort(x_sub);
    auto v_sub = Kokkos::subview(pk_d_v, std::make_pair(range_min, range_max),
                                 Kokkos::ALL);
    sorter.sort(v_sub);
    auto f_sub = Kokkos::subview(pk_d_f, std::make_pair(range_min, range_max),
                                 Kokkos::ALL);
    sorter.sort(f_sub);
    sorter.sort(pk_d_type);
    sorter.sort(pk_d_id);
    sorter.sort(pk_d_q);
  }
  Kokkos::resize(bincount, pk_d_bincount.extent(0), pk_d_bincount.extent(1),
                 pk_d_bincount.extent(2));
  Kokkos::deep_copy(bincount, pk_d_bincount);
  Kokkos::resize(binoffsets, pk_d_binoffsets.extent(0),
                 pk_d_binoffsets.extent(1), pk_d_binoffsets.extent(2));
  Kokkos::deep_copy(binoffsets, pk_d_binoffsets);
  Kokkos::resize(x, pk_d_x.extent(0), pk_d_x.extent(1));
  Kokkos::deep_copy(x, pk_d_x);
  Kokkos::resize(v, pk_d_v.extent(0), pk_d_v.extent(1));
  Kokkos::deep_copy(v, pk_d_v);
  Kokkos::resize(f, pk_d_f.extent(0), pk_d_f.extent(1));
  Kokkos::deep_copy(f, pk_d_f);
  Kokkos::resize(type, pk_d_type.extent(0));
  Kokkos::deep_copy(type, pk_d_type);
  Kokkos::resize(id, pk_d_id.extent(0));
  Kokkos::deep_copy(id, pk_d_id);
  Kokkos::resize(q, pk_d_q.extent(0));
  Kokkos::deep_copy(q, pk_d_q);
  Kokkos::resize(permute_vector, pk_d_permute_vector.extent(0));
  Kokkos::deep_copy(permute_vector, pk_d_permute_vector);
  Kokkos::resize(bin_count_1d, pk_d_bin_count_1d.extent(0));
  Kokkos::deep_copy(bin_count_1d, pk_d_bin_count_1d);
  Kokkos::resize(bin_offsets_1d, pk_d_bin_offsets_1d.extent(0));
  Kokkos::deep_copy(bin_offsets_1d, pk_d_bin_offsets_1d);
}
void wrapper(pybind11::kwargs kwargs) {
  run(kwargs["nbinx"].cast<int32_t>(), kwargs["nbiny"].cast<int32_t>(),
      kwargs["nbinz"].cast<int32_t>(), kwargs["nhalo"].cast<int32_t>(),
      kwargs["minx"].cast<double>(), kwargs["maxx"].cast<double>(),
      kwargs["miny"].cast<double>(), kwargs["maxy"].cast<double>(),
      kwargs["minz"].cast<double>(), kwargs["maxz"].cast<double>(),
      kwargs["range_min"].cast<int32_t>(), kwargs["range_max"].cast<int32_t>(),
      kwargs["sort"].cast<bool>(),
      kwargs["bincount"]
          .cast<Kokkos::View<int32_t ***, pk_exec_space::array_layout,
                             pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["binoffsets"]
          .cast<Kokkos::View<int32_t ***, pk_exec_space::array_layout,
                             pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["x"]
          .cast<Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["v"]
          .cast<Kokkos::View<double **, pk_exec_space::array_layout,
                             pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["f"]
          .cast<Kokkos::View<double **, pk_exec_space::array_layout,
                             pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["type"]
          .cast<Kokkos::View<int32_t *, pk_exec_space::array_layout,
                             pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["id"]
          .cast<Kokkos::View<int32_t *, pk_exec_space::array_layout,
                             pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["q"]
          .cast<Kokkos::View<double *, pk_exec_space::array_layout,
                             pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["permute_vector"]
          .cast<Kokkos::View<int32_t *, pk_exec_space::array_layout,
                             pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["bin_count_1d"]
          .cast<Kokkos::View<int32_t *, pk_exec_space::array_layout,
                             pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["bin_offsets_1d"]
          .cast<Kokkos::View<int32_t *, pk_exec_space::array_layout,
                             pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["pk_exec_space_instance"].cast<pk_exec_space>(),
      kwargs["pk_randpool_seed"].cast<int>(),
      kwargs["pk_randpool_num_states"].cast<int>());
  ;
}
PYBIND11_MODULE(
    PLACEHOLDER, k) {
  k.def("wrapper", &wrapper);
}