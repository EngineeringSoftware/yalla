// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#ifndef PK_FUNCTOR_INIT_SYSTEM_HPP
#define PK_FUNCTOR_INIT_SYSTEM_HPP

struct pk_functor_init_system {
  struct get_n_tag {};
  struct init_x_tag {};
  int ix_start;
  int ix_end;
  int iy_start;
  int iy_end;
  int iz_start;
  int iz_end;
  double lattice_constant;
  double sub_domain_hi_x;
  double sub_domain_hi_y;
  double sub_domain_hi_z;
  double sub_domain_lo_x;
  double sub_domain_lo_y;
  double sub_domain_lo_z;
  Kokkos::View<double **, Kokkos::LayoutRight,
               Kokkos::HostSpace,
               Kokkos::Experimental::EmptyViewHooks>
      basis;
  Kokkos::View<double **, Kokkos::LayoutRight, Kokkos::HostSpace,
               Kokkos::Experimental::EmptyViewHooks>
      x;
  Kokkos::View<int *, Kokkos::LayoutRight,
               Kokkos::HostSpace,
               Kokkos::Experimental::EmptyViewHooks>
      type;
  Kokkos::View<int *, Kokkos::LayoutRight,
               Kokkos::HostSpace,
               Kokkos::Experimental::EmptyViewHooks>
      id;
  pk_functor_init_system(
      int ix_start, int ix_end, int iy_start, int iy_end,
      int iz_start, int iz_end, double lattice_constant,
      double sub_domain_hi_x, double sub_domain_hi_y, double sub_domain_hi_z,
      double sub_domain_lo_x, double sub_domain_lo_y, double sub_domain_lo_z,
      Kokkos::View<double **, Kokkos::LayoutRight,
                   Kokkos::HostSpace,
                   Kokkos::Experimental::EmptyViewHooks>
          basis,
      Kokkos::View<double **, Kokkos::LayoutRight,
                   Kokkos::HostSpace,
                   Kokkos::Experimental::EmptyViewHooks>
          x,
      Kokkos::View<int *, Kokkos::LayoutRight,
                   Kokkos::HostSpace,
                   Kokkos::Experimental::EmptyViewHooks>
          type,
      Kokkos::View<int *, Kokkos::LayoutRight,
                   Kokkos::HostSpace,
                   Kokkos::Experimental::EmptyViewHooks>
          id) :     ix_start(ix_start), 
    ix_end(ix_end), 
    iy_start(iy_start), 
    iy_end(iy_end), 
    iz_start(iz_start), 
    iz_end(iz_end), 
    lattice_constant(lattice_constant), 
    sub_domain_hi_x(sub_domain_hi_x), 
    sub_domain_hi_y(sub_domain_hi_y), 
    sub_domain_hi_z(sub_domain_hi_z), 
    sub_domain_lo_x(sub_domain_lo_x), 
    sub_domain_lo_y(sub_domain_lo_y), 
    sub_domain_lo_z(sub_domain_lo_z), 
    basis(basis), 
    x(x), 
    type(type), 
    id(id) {
  };
  void operator()(const get_n_tag &, int iz,
                                  int &n) const ;
  void operator()(const init_x_tag &, int iz,
                                  int &n) const ;
};

#endif