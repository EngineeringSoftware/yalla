// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#include <Kokkos_Core.hpp>
#include <functor.hpp>
#include <pybind11/pybind11.h>

double run_fullneigh_reduce(
    bool use_stackparams,
    Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                 Kokkos::Experimental::DefaultViewHooks>
        rnd_lj1,
    Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                 Kokkos::Experimental::DefaultViewHooks>
        rnd_lj2,
    Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                 Kokkos::Experimental::DefaultViewHooks>
        rnd_cutsq,
    Kokkos::View<int32_t *, Kokkos::LayoutRight, pk_arg_memspace,
                 Kokkos::Experimental::DefaultViewHooks>
        num_neighs_view,
    Kokkos::View<int32_t **, Kokkos::LayoutRight, pk_arg_memspace,
                 Kokkos::Experimental::DefaultViewHooks>
        neighs_view,
    Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                 Kokkos::Experimental::DefaultViewHooks>
        x,
    Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                 Kokkos::Experimental::DefaultViewHooks>
        f,
    Kokkos::View<int32_t *, Kokkos::LayoutRight, pk_arg_memspace,
                 Kokkos::Experimental::DefaultViewHooks>
        type,
    pk_exec_space pk_exec_space_instance, const std::string &pk_kernel_name,
    int pk_threads_begin, int pk_threads_end, int pk_randpool_seed,
    int pk_randpool_num_states) {
  double pk_acc = 0;
  auto pk_d_rnd_lj1 =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, rnd_lj1);
  auto pk_d_rnd_lj2 =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, rnd_lj2);
  auto pk_d_rnd_cutsq =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, rnd_cutsq);
  auto pk_d_num_neighs_view = Kokkos::create_mirror_view_and_copy(
      pk_exec_space_instance, num_neighs_view);
  auto pk_d_neighs_view =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, neighs_view);
  auto pk_d_x = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, x);
  auto pk_d_f = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, f);
  auto pk_d_type =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, type);
  pk_functor_fullneigh_reduce pk_f(
      use_stackparams, pk_d_rnd_lj1, pk_d_rnd_lj2, pk_d_rnd_cutsq,
      pk_d_num_neighs_view, pk_d_neighs_view, pk_d_x, pk_d_f, pk_d_type);
  Kokkos::parallel_reduce(
      pk_kernel_name,
      Kokkos::RangePolicy<
          pk_exec_space,
          pk_functor_fullneigh_reduce::fullneigh_reduce_tag>(
          pk_exec_space_instance, pk_threads_begin, pk_threads_end),
      pk_f, pk_acc);
  Kokkos::resize(rnd_lj1, pk_d_rnd_lj1.extent(0), pk_d_rnd_lj1.extent(1));
  Kokkos::deep_copy(rnd_lj1, pk_d_rnd_lj1);
  Kokkos::resize(rnd_lj2, pk_d_rnd_lj2.extent(0), pk_d_rnd_lj2.extent(1));
  Kokkos::deep_copy(rnd_lj2, pk_d_rnd_lj2);
  Kokkos::resize(rnd_cutsq, pk_d_rnd_cutsq.extent(0), pk_d_rnd_cutsq.extent(1));
  Kokkos::deep_copy(rnd_cutsq, pk_d_rnd_cutsq);
  Kokkos::resize(num_neighs_view, pk_d_num_neighs_view.extent(0));
  Kokkos::deep_copy(num_neighs_view, pk_d_num_neighs_view);
  Kokkos::resize(neighs_view, pk_d_neighs_view.extent(0),
                 pk_d_neighs_view.extent(1));
  Kokkos::deep_copy(neighs_view, pk_d_neighs_view);
  Kokkos::resize(x, pk_d_x.extent(0), pk_d_x.extent(1));
  Kokkos::deep_copy(x, pk_d_x);
  Kokkos::resize(f, pk_d_f.extent(0), pk_d_f.extent(1));
  Kokkos::deep_copy(f, pk_d_f);
  Kokkos::resize(type, pk_d_type.extent(0));
  Kokkos::deep_copy(type, pk_d_type);
  return pk_acc;
}
double wrapper_fullneigh_reduce(pybind11::kwargs kwargs) {
  return run_fullneigh_reduce(
      kwargs["use_stackparams"].cast<bool>(),
      kwargs["rnd_lj1"]
          .cast<Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["rnd_lj2"]
          .cast<Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["rnd_cutsq"]
          .cast<Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["num_neighs_view"]
          .cast<Kokkos::View<int32_t *, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["neighs_view"]
          .cast<Kokkos::View<int32_t **, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["x"]
          .cast<Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["f"]
          .cast<Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["type"]
          .cast<Kokkos::View<int32_t *, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["pk_exec_space_instance"].cast<pk_exec_space>(),
      kwargs["pk_kernel_name"].cast<std::string>(),
      kwargs["pk_threads_begin"].cast<int>(),
      kwargs["pk_threads_end"].cast<int>(),
      kwargs["pk_randpool_seed"].cast<int>(),
      kwargs["pk_randpool_num_states"].cast<int>());
  ;
}
PYBIND11_MODULE(
    PLACEHOLDER, k) {
  k.def("wrapper_fullneigh_reduce", &wrapper_fullneigh_reduce);
}