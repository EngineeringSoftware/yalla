// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#include <Kokkos_Core.hpp>
#include <functor.hpp>
#include <pybind11/pybind11.h>

double run_yAx(int32_t cols,
               Kokkos::View<double *, Kokkos::LayoutRight, pk_arg_memspace,
                            Kokkos::Experimental::DefaultViewHooks>
                   y_view,
               Kokkos::View<double *, Kokkos::LayoutRight, pk_arg_memspace,
                            Kokkos::Experimental::DefaultViewHooks>
                   x_view,
               Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                            Kokkos::Experimental::DefaultViewHooks>
                   A_view,
               pk_exec_space pk_exec_space_instance,
               const std::string &pk_kernel_name, int pk_league_size,
               int pk_team_size, int pk_vector_length, int pk_randpool_seed,
               int pk_randpool_num_states) {
  double pk_acc = 0;
  auto pk_d_y_view =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, y_view);
  auto pk_d_x_view =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, x_view);
  auto pk_d_A_view =
      Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, A_view);
  pk_functor_yAx pk_f(cols, pk_d_y_view, pk_d_x_view,
                                     pk_d_A_view);
  if (pk_team_size == -1) {
    Kokkos::parallel_reduce(
        pk_kernel_name,
        Kokkos::TeamPolicy<pk_exec_space,
                           pk_functor_yAx::yAx_tag>(
            pk_exec_space_instance, pk_league_size, Kokkos::AUTO,
            pk_vector_length),
        pk_f, pk_acc);
  } else {
    Kokkos::parallel_reduce(
        pk_kernel_name,
        Kokkos::TeamPolicy<pk_exec_space,
                           pk_functor_yAx::yAx_tag>(
            pk_exec_space_instance, pk_league_size, pk_team_size,
            pk_vector_length),
        pk_f, pk_acc);
  }
  Kokkos::resize(y_view, pk_d_y_view.extent(0));
  Kokkos::deep_copy(y_view, pk_d_y_view);
  Kokkos::resize(x_view, pk_d_x_view.extent(0));
  Kokkos::deep_copy(x_view, pk_d_x_view);
  Kokkos::resize(A_view, pk_d_A_view.extent(0), pk_d_A_view.extent(1));
  Kokkos::deep_copy(A_view, pk_d_A_view);
  return pk_acc;
}
double wrapper_yAx(pybind11::kwargs kwargs) {
  return run_yAx(
      kwargs["cols"].cast<int32_t>(),
      kwargs["y_view"]
          .cast<Kokkos::View<double *, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["x_view"]
          .cast<Kokkos::View<double *, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["A_view"]
          .cast<Kokkos::View<double **, Kokkos::LayoutRight, pk_arg_memspace,
                             Kokkos::Experimental::DefaultViewHooks>>(),
      kwargs["pk_exec_space_instance"].cast<pk_exec_space>(),
      kwargs["pk_kernel_name"].cast<std::string>(),
      kwargs["pk_league_size"].cast<int>(), kwargs["pk_team_size"].cast<int>(),
      kwargs["pk_vector_length"].cast<int>(),
      kwargs["pk_randpool_seed"].cast<int>(),
      kwargs["pk_randpool_num_states"].cast<int>());
  ;
}
PYBIND11_MODULE(
    PLACEHOLDER, k) {
  k.def("wrapper_yAx", &wrapper_yAx);
}